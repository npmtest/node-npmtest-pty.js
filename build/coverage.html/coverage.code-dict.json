{"/home/travis/build/npmtest/node-npmtest-pty.js/test.js":"/* istanbul instrument in package npmtest_pty_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pty.js/lib.npmtest_pty.js.js":"/* istanbul instrument in package npmtest_pty_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pty_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pty_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pty.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pty.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pty_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pty_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pty_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pty_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pty_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pty_js.__dirname + '/lib.npmtest_pty_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pty.js/node_modules/pty.js/index.js":"var os = process.platform === 'win32' ? '_win' : '';\nmodule.exports = require('./lib/pty'+ os +'.js');\n","/home/travis/build/npmtest/node-npmtest-pty.js/node_modules/pty.js/lib/pty.js":"/**\n * pty.js\n * Copyright (c) 2012-2015, Christopher Jeffrey (MIT License)\n * Binding to the pseudo terminals.\n */\n\nvar extend = require('extend');\nvar EventEmitter = require('events').EventEmitter;\nvar pty = require('../build/Release/pty.node');\nvar net = require('net');\nvar tty = require('tty');\nvar nextTick = global.setImmediate || process.nextTick;\n\nvar version = process.versions.node.split('.').map(function(n) {\n  return +(n + '').split('-')[0];\n});\n\n/**\n * Terminal\n */\n\n// Example:\n//  var term = new Terminal('bash', [], {\n//    name: 'xterm-color',\n//    cols: 80,\n//    rows: 24,\n//    cwd: process.env.HOME,\n//    env: process.env\n//  });\n\nfunction Terminal(file, args, opt) {\n  if (!(this instanceof Terminal)) {\n    return new Terminal(file, args, opt);\n  }\n\n  var self = this\n    , env\n    , cwd\n    , name\n    , cols\n    , rows\n    , uid\n    , gid\n    , term;\n\n  // backward compatibility\n  if (typeof args === 'string') {\n    opt = {\n      name: arguments[1],\n      cols: arguments[2],\n      rows: arguments[3],\n      cwd: process.env.HOME\n    };\n    args = [];\n  }\n\n  // for 'close'\n  this._internalee = new EventEmitter;\n\n  // arguments\n  args = args || [];\n  file = file || 'sh';\n  opt = opt || {};\n\n  cols = opt.cols || 80;\n  rows = opt.rows || 24;\n\n  uid = opt.uid != null ? opt.uid : -1;\n  gid = opt.gid != null ? opt.gid : -1;\n\n  opt.env = opt.env || process.env;\n  env = extend({}, opt.env);\n\n  if (opt.env === process.env) {\n    // Make sure we didn't start our\n    // server from inside tmux.\n    delete env.TMUX;\n    delete env.TMUX_PANE;\n\n    // Make sure we didn't start\n    // our server from inside screen.\n    // http://web.mit.edu/gnu/doc/html/screen_20.html\n    delete env.STY;\n    delete env.WINDOW;\n\n    // Delete some variables that\n    // might confuse our terminal.\n    delete env.WINDOWID;\n    delete env.TERMCAP;\n    delete env.COLUMNS;\n    delete env.LINES;\n  }\n\n  // Could set some basic env vars\n  // here, if they do not exist:\n  // USER, SHELL, HOME, LOGNAME, WINDOWID\n\n  cwd = opt.cwd || process.cwd();\n  name = opt.name || env.TERM || 'xterm';\n  env.TERM = name;\n  // XXX Shouldn't be necessary:\n  // env.LINES = rows + '';\n  // env.COLUMNS = cols + '';\n\n  env = environ(env);\n\n  function onexit(code, signal) {\n    // XXX Sometimes a data event is emitted\n    // after exit. Wait til socket is destroyed.\n    if (!self._emittedClose) {\n      if (self._boundClose) return;\n      self._boundClose = true;\n      self.once('close', function() {\n        self.emit('exit', code, signal);\n      });\n      return;\n    }\n    self.emit('exit', code, signal);\n  }\n\n  // fork\n  term = pty.fork(file, args, env, cwd, cols, rows, uid, gid, onexit);\n\n  this.socket = TTYStream(term.fd);\n  this.socket.setEncoding('utf8');\n\n  if (opt.resume !== false) {\n    this.socket.resume();\n  }\n\n  // setup\n  this.socket.on('error', function(err) {\n    // NOTE: fs.ReadStream gets EAGAIN twice at first:\n    if (err.code) {\n      if (~err.code.indexOf('EAGAIN')) return;\n    }\n\n    // close\n    self._close();\n    // EIO on exit from fs.ReadStream:\n    if (!self._emittedClose) {\n      self._emittedClose = true;\n      Terminal.total--;\n      self.emit('close');\n    }\n\n    // EIO, happens when someone closes our child\n    // process: the only process in the terminal.\n    // node < 0.6.14: errno 5\n    // node >= 0.6.14: read EIO\n    if (err.code) {\n      if (~err.code.indexOf('errno 5')\n          || ~err.code.indexOf('EIO')) return;\n    }\n\n    // throw anything else\n    if (self.listeners('error').length < 2) {\n      throw err;\n    }\n  });\n\n  this.pid = term.pid;\n  this.fd = term.fd;\n  this.pty = term.pty;\n\n  this.file = file;\n  this.name = name;\n  this.cols = cols;\n  this.rows = rows;\n\n  this.readable = true;\n  this.writable = true;\n\n  Terminal.total++;\n\n  this.socket.on('close', function() {\n    if (self._emittedClose) return;\n    self._emittedClose = true;\n    Terminal.total--;\n    self._close();\n    self.emit('close');\n  });\n\n  env = null;\n}\n\nTerminal.fork =\nTerminal.spawn =\nTerminal.createTerminal = function(file, args, opt) {\n  return new Terminal(file, args, opt);\n};\n\n/**\n * openpty\n */\n\nTerminal.open = function(opt) {\n  var self = Object.create(Terminal.prototype)\n    , opt = opt || {};\n\n  if (arguments.length > 1) {\n    opt = {\n      cols: arguments[1],\n      rows: arguments[2]\n    };\n  }\n\n  var cols = opt.cols || 80\n    , rows = opt.rows || 24\n    , term;\n\n  // open\n  term = pty.open(cols, rows);\n\n  self.master = TTYStream(term.master);\n  self.master.setEncoding('utf8');\n  self.master.resume();\n\n  self.slave = TTYStream(term.slave);\n  self.slave.setEncoding('utf8');\n  self.slave.resume();\n\n  self.socket = self.master;\n  self.pid = null;\n  self.fd = term.master;\n  self.pty = term.pty;\n\n  self.file = process.argv[0] || 'node';\n  self.name = process.env.TERM || '';\n  self.cols = cols;\n  self.rows = rows;\n\n  self.readable = true;\n  self.writable = true;\n\n  self.socket.on('error', function(err) {\n    Terminal.total--;\n    self._close();\n    if (self.listeners('error').length < 2) {\n      throw err;\n    }\n  });\n\n  Terminal.total++;\n  self.socket.on('close', function() {\n    Terminal.total--;\n    self._close();\n  });\n\n  return self;\n};\n\n/**\n * Total\n */\n\n// Keep track of the total\n// number of terminals for\n// the process.\nTerminal.total = 0;\n\n/**\n * Events\n */\n\nTerminal.prototype.write = function(data) {\n  return this.socket.write(data);\n};\n\nTerminal.prototype.end = function(data) {\n  return this.socket.end(data);\n};\n\nTerminal.prototype.pipe = function(dest, options) {\n  return this.socket.pipe(dest, options);\n};\n\nTerminal.prototype.pause = function() {\n  return this.socket.pause();\n};\n\nTerminal.prototype.resume = function() {\n  return this.socket.resume();\n};\n\nTerminal.prototype.setEncoding = function(enc) {\n  if (this.socket._decoder) {\n    delete this.socket._decoder;\n  }\n  if (enc) {\n    this.socket.setEncoding(enc);\n  }\n};\n\nTerminal.prototype.addListener =\nTerminal.prototype.on = function(type, func) {\n  if (type === 'close') {\n    this._internalee.on('close', func);\n    return this;\n  }\n  this.socket.on(type, func);\n  return this;\n};\n\nTerminal.prototype.emit = function(evt) {\n  if (evt === 'close') {\n    return this._internalee.emit.apply(this._internalee, arguments);\n  }\n  return this.socket.emit.apply(this.socket, arguments);\n};\n\nTerminal.prototype.listeners = function(type) {\n  return this.socket.listeners(type);\n};\n\nTerminal.prototype.removeListener = function(type, func) {\n  this.socket.removeListener(type, func);\n  return this;\n};\n\nTerminal.prototype.removeAllListeners = function(type) {\n  this.socket.removeAllListeners(type);\n  return this;\n};\n\nTerminal.prototype.once = function(type, func) {\n  this.socket.once(type, func);\n  return this;\n};\n\nTerminal.prototype.__defineGetter__('stdin', function() {\n  return this;\n});\n\nTerminal.prototype.__defineGetter__('stdout', function() {\n  return this;\n});\n\nTerminal.prototype.__defineGetter__('stderr', function() {\n  throw new Error('No stderr.');\n});\n\n/**\n * TTY\n */\n\nTerminal.prototype.resize = function(cols, rows) {\n  cols = cols || 80;\n  rows = rows || 24;\n\n  this.cols = cols;\n  this.rows = rows;\n\n  pty.resize(this.fd, cols, rows);\n};\n\nTerminal.prototype.destroy = function() {\n  var self = this;\n\n  // close\n  this._close();\n\n  // Need to close the read stream so\n  // node stops reading a dead file descriptor.\n  // Then we can safely SIGHUP the shell.\n  this.socket.once('close', function() {\n    self.kill('SIGHUP');\n  });\n\n  this.socket.destroy();\n};\n\nTerminal.prototype.kill = function(sig) {\n  try {\n    process.kill(this.pid, sig || 'SIGHUP');\n  } catch(e) {\n    ;\n  }\n};\n\nTerminal.prototype.redraw = function() {\n  var self = this\n    , cols = this.cols\n    , rows = this.rows;\n\n  // We could just send SIGWINCH, but most programs will\n  // ignore it if the size hasn't actually changed.\n\n  this.resize(cols + 1, rows + 1);\n\n  setTimeout(function() {\n    self.resize(cols, rows);\n  }, 30);\n};\n\nTerminal.prototype.__defineGetter__('process', function() {\n  return pty.process(this.fd, this.pty) || this.file;\n});\n\nTerminal.prototype._close = function() {\n  this.socket.writable = false;\n  this.socket.readable = false;\n  this.write = function() {};\n  this.end = function() {};\n  this.writable = false;\n  this.readable = false;\n};\n\n/**\n * TTY Stream\n */\n\nfunction TTYStream(fd) {\n  // Could use: if (!require('tty').ReadStream)\n  if (version[0] === 0 && version[1] < 7) {\n    return new net.Socket(fd);\n  }\n\n  if (version[0] === 0 && version[1] < 12) {\n    return new tty.ReadStream(fd);\n  }\n\n  return new Socket(fd);\n}\n\n/**\n * Wrap net.Socket for a workaround\n */\n\nfunction Socket(options) {\n  if (!(this instanceof Socket)) {\n    return new Socket(options);\n  }\n  var tty = process.binding('tty_wrap');\n  var guessHandleType = tty.guessHandleType;\n  tty.guessHandleType = function() {\n    return 'PIPE';\n  };\n  net.Socket.call(this, options);\n  tty.guessHandleType = guessHandleType;\n}\n\nSocket.prototype.__proto__ = net.Socket.prototype;\n\n/**\n * Helpers\n */\n\nfunction environ(env) {\n  var keys = Object.keys(env || {})\n    , l = keys.length\n    , i = 0\n    , pairs = [];\n\n  for (; i < l; i++) {\n    pairs.push(keys[i] + '=' + env[keys[i]]);\n  }\n\n  return pairs;\n}\n\n/**\n * Expose\n */\n\nmodule.exports = exports = Terminal;\nexports.Terminal = Terminal;\nexports.native = pty;\n","/home/travis/build/npmtest/node-npmtest-pty.js/node_modules/pty.js/lib/pty_win.js":"/**\n * pty_win.js\n * Copyright (c) 2012-2015, Christopher Jeffrey, Peter Sunde (MIT License)\n */\n\nvar net = require('net');\nvar path = require('path');\nvar extend = require('extend');\nvar inherits = require('util').inherits;\nvar BaseTerminal = require('./pty').Terminal;\nvar pty = require('../build/Release/pty.node');\n\n// Counter of number of \"pipes\" created so far.\nvar pipeIncr = 0;\n\n/**\n * Agent. Internal class.\n *\n * Everytime a new pseudo terminal is created it is contained\n * within agent.exe. When this process is started there are two\n * available named pipes (control and data socket).\n */\n\nfunction Agent(file, args, env, cwd, cols, rows, debug) {\n  var self = this;\n\n  // Increment the number of pipes created.\n  pipeIncr++;\n\n  // Unique identifier per pipe created.\n  var timestamp = Date.now();\n\n  // The data pipe is the direct connection to the forked terminal.\n  this.dataPipe = '\\\\\\\\.\\\\pipe\\\\winpty-data-' + pipeIncr + '' + timestamp;\n\n  // Dummy socket for awaiting `ready` event.\n  this.ptySocket = new net.Socket();\n\n  // Create terminal pipe IPC channel and forward\n  // to a local unix socket.\n  this.ptyDataPipe = net.createServer(function (socket) {\n\n    // Default socket encoding.\n    socket.setEncoding('utf8');\n\n    // Pause until `ready` event is emitted.\n    socket.pause();\n\n    // Sanitize input variable.\n    file = file;\n    args = args.join(' ');\n    cwd = path.resolve(cwd);\n\n    // Start terminal session.\n    pty.startProcess(self.pid, file, args, env, cwd);\n\n    // Emit ready event.\n    self.ptySocket.emit('ready_datapipe', socket);\n\n  }).listen(this.dataPipe);\n\n  // Open pty session.\n  var term = pty.open(self.dataPipe, cols, rows, debug);\n\n  // Terminal pid.\n  this.pid = term.pid;\n\n  // Not available on windows.\n  this.fd = term.fd;\n\n  // Generated incremental number that has no real purpose besides\n  // using it as a terminal id.\n  this.pty = term.pty;\n}\n\n/**\n * Terminal\n */\n\n/*\nvar pty = require('./');\n\nvar term = pty.fork('cmd.exe', [], {\n  name: 'Windows Shell',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env,\n  debug: true\n});\n\nterm.on('data', function(data) {\n  console.log(data);\n});\n*/\n\nfunction Terminal(file, args, opt) {\n\n  var self = this,\n      env, cwd, name, cols, rows, term, agent, debug;\n\n  // Backward compatibility.\n  if (typeof args === 'string') {\n    opt = {\n      name: arguments[1],\n      cols: arguments[2],\n      rows: arguments[3],\n      cwd: process.env.HOME\n    };\n    args = [];\n  }\n\n  // Arguments.\n  args = args || [];\n  file = file || 'cmd.exe';\n  opt = opt || {};\n\n  env = extend({}, opt.env);\n\n  cols = opt.cols || 80;\n  rows = opt.rows || 30;\n  cwd = opt.cwd || process.cwd();\n  name = opt.name || env.TERM || 'Windows Shell';\n  debug = opt.debug || false;\n\n  env.TERM = name;\n\n  // Initialize environment variables.\n  env = environ(env);\n\n  // If the terminal is ready\n  this.isReady = false;\n\n  // Functions that need to run after `ready` event is emitted.\n  this.deferreds = [];\n\n  // Create new termal.\n  this.agent = new Agent(file, args, env, cwd, cols, rows, debug);\n\n  // The dummy socket is used so that we can defer everything\n  // until its available.\n  this.socket = this.agent.ptySocket;\n\n  // The terminal socket when its available\n  this.dataPipe = null;\n\n  // Not available until `ready` event emitted.\n  this.pid = this.agent.pid;\n  this.fd = this.agent.fd;\n  this.pty = this.agent.pty;\n\n  // The forked windows terminal is not available\n  // until `ready` event is emitted.\n  this.socket.on('ready_datapipe', function (socket) {\n\n    // Set terminal socket\n    self.dataPipe = socket;\n\n    // These events needs to be forwarded.\n    ['connect', 'data', 'end', 'timeout', 'drain'].forEach(function(event) {\n      self.dataPipe.on(event, function(data) {\n\n        // Wait until the first data event is fired\n        // then we can run deferreds.\n        if(!self.isReady && event == 'data') {\n\n          // Terminal is now ready and we can\n          // avoid having to defer method calls.\n          self.isReady = true;\n\n          // Execute all deferred methods\n          self.deferreds.forEach(function(fn) {\n            // NB! In order to ensure that `this` has all\n            // its references updated any variable that\n            // need to be available in `this` before\n            // the deferred is run has to be declared\n            // above this forEach statement.\n            fn.run();\n          });\n\n          // Reset\n          self.deferreds = [];\n\n        }\n\n        // Emit to dummy socket\n        self.socket.emit(event, data);\n\n      });\n    });\n\n    // Resume socket.\n    self.dataPipe.resume();\n\n    // Shutdown if `error` event is emitted.\n    self.dataPipe.on('error', function (err) {\n\n      // Close terminal session.\n      self._close();\n\n      // EIO, happens when someone closes our child\n      // process: the only process in the terminal.\n      // node < 0.6.14: errno 5\n      // node >= 0.6.14: read EIO\n      if (err.code) {\n        if (~err.code.indexOf('errno 5') || ~err.code.indexOf('EIO')) return;\n      }\n\n      // Throw anything else.\n      if (self.listeners('error').length < 2) {\n        throw err;\n      }\n\n    });\n\n    // Cleanup after the socket is closed.\n    self.dataPipe.on('close', function () {\n      Terminal.total--;\n      self.emit('exit', null);\n      self._close();\n    });\n\n  });\n\n  this.file = file;\n  this.name = name;\n  this.cols = cols;\n  this.rows = rows;\n\n  this.readable = true;\n  this.writable = true;\n\n  Terminal.total++;\n}\n\nTerminal.fork =\nTerminal.spawn =\nTerminal.createTerminal = function (file, args, opt) {\n  return new Terminal(file, args, opt);\n};\n\n// Inherit from pty.js\ninherits(Terminal, BaseTerminal);\n\n// Keep track of the total\n// number of terminals for\n// the process.\nTerminal.total = 0;\n\n/**\n * Events\n */\n\n/**\n * openpty\n */\n\nTerminal.open = function () {\n  throw new Error(\"open() not supported on windows, use Fork() instead.\");\n};\n\n/**\n * Events\n */\n\nTerminal.prototype.write = function(data) {\n  defer(this, function() {\n    this.dataPipe.write(data);\n  });\n};\n\n/**\n * TTY\n */\n\nTerminal.prototype.resize = function (cols, rows) {\n  defer(this, function() {\n\n    cols = cols || 80;\n    rows = rows || 24;\n\n    this.cols = cols;\n    this.rows = rows;\n\n    pty.resize(this.pid, cols, rows);\n  });\n};\n\nTerminal.prototype.destroy = function () {\n  defer(this, function() {\n    this.kill();\n  });\n};\n\nTerminal.prototype.kill = function (sig) {\n  defer(this, function() {\n    if (sig !== undefined) {\n      throw new Error(\"Signals not supported on windows.\");\n    }\n    this._close();\n    pty.kill(this.pid);\n  });\n};\n\nTerminal.prototype.__defineGetter__('process', function () {\n  return this.name;\n});\n\n/**\n * Helpers\n */\n\nfunction defer(terminal, deferredFn) {\n\n  // Ensure that this method is only used within Terminal class.\n  if (!(terminal instanceof Terminal)) {\n    throw new Error(\"Must be instanceof Terminal\");\n  }\n\n  // If the terminal is ready, execute.\n  if (terminal.isReady) {\n    deferredFn.apply(terminal, null);\n    return;\n  }\n\n  // Queue until terminal is ready.\n  terminal.deferreds.push({\n    run: function() {\n      // Run deffered.\n      deferredFn.apply(terminal, null);\n    }\n  });\n}\n\nfunction environ(env) {\n  var keys = Object.keys(env || {})\n    , l = keys.length\n    , i = 0\n    , pairs = [];\n\n  for (; i < l; i++) {\n    pairs.push(keys[i] + '=' + env[keys[i]]);\n  }\n\n  return pairs;\n}\n\n/**\n * Expose\n */\n\nmodule.exports = exports = Terminal;\nexports.Terminal = Terminal;\nexports.native = pty;\n"}